---
- name: Install prerequisites for NSO
  apt:
    name: "{{ nso_package_requirements }}"
    update_cache: yes
    install-recommends: no

- name: Create temporary installer directory
  file:
    path: "{{ nso_tmp_dir }}"
    state: directory

- block: 
  - name: Get the NSO installer
    get_url:
      url: "{{ nso_installer_file }}"
      dest: "{{ nso_tmp_dir }}"
    register: copy_results

  - set_fact:
      local_installer_file: "{{ copy_results.dest }}"
    when: copy_results.changed
  when: nso_remote_src | bool

- block:
  - name: Create temporary installer directory
    file:
      path: "{{ nso_tmp_dir }}"
      state: directory
    connection: local
    become: no

  - name: Copy installer to {{ nso_tmp_dir }} directory
    get_url:
      url: "{{ nso_installer_file }}"
      dest: "{{ nso_tmp_dir }}/{{ nso_installer_file | basename }}"
    connection: local
    become: no
    vars:
      ansible_python_interpreter: "{{ hostvars['localhost'].ansible_python_interpreter}}"

  - name: Copy installer to {{ inventory_hostname }}
    copy:
      src: "{{ copy_results.dest }}"
      dest: "{{ copy_results.dest }}"
    register: copy_results
  
  - set_fact:
      local_installer_file: "{{ copy_results.dest }}"
    when: copy_results.changed

  when: not nso_remote_src | bool

- block:
  # - set_fact:
  #     local_installer_file: "{{ copy_results.dest }}"

  - block:
      - name: "Unpack '{{ local_installer_file }}'"
        shell: 'cd {{ nso_tmp_dir }}; sh {{ local_installer_file }} --skip-verification'

      - set_fact:
          nso_installer_bin: '{{ local_installer_file | regex_replace("-freetrial", "") | regex_replace("signed.bin$","installer.bin") }}'
    when: '"signed.bin" in local_installer_file'

  - name: "Run {{ nso_installer_bin }}"
    shell: 'sh {{ nso_installer_bin }} --system-install'
  when: local_installer_file is defined

- block:
  - name: Get the NSO packages
    get_url:
      url: "{{ item }}"
      dest: "{{ nso_tmp_dir }}"
    loop: "{{ nso_ned_files }}"
    register: copy_results
    when: nso_remote_src | bool

  - set_fact:
      results: "{{ copy_results.results }}"
  when: nso_remote_src | bool

- block:
  - name: Create temporary installer directory
    file:
      path: "{{ nso_tmp_dir }}"
      state: directory
    connection: local
    become: no

  - name: Copy NSO packages to {{ nso_tmp_dir }} directory
    get_url:
      url: "{{ item }}"
      dest: "{{ nso_tmp_dir }}/{{ item | basename }}"
    loop: "{{ nso_ned_files }}"
    connection: local
    become: no
    register: copy_results
    vars:
      ansible_python_interpreter: "{{ hostvars['localhost'].ansible_python_interpreter}}"

  - name: Copy NSO packages to {{ inventory_hostname }}
    copy:
      src: "{{ item.dest }}"
      dest: "{{ item.dest }}"
    loop: "{{ copy_results.results }}"
    register: copy_results
  
  - set_fact:
      results: "{{ copy_results.results }}"
  when: not nso_remote_src | bool

- name: Unpack NSO packages
  shell: 'cd {{ nso_tmp_dir }}; sh {{ item.dest }} --skip-verification'
  loop: "{{ results }}"
  when: item.changed

- name: Extract packages into {{ nso_run_dir }}/packages
  ansible.builtin.unarchive:
    src: "{{ item.dest | regex_replace('-freetrial', '') | regex_replace('signed.bin$', 'tar.gz') }}"
    dest: "{{ nso_run_dir }}/packages"
    remote_src: yes
  loop: "{{ results }}"
  when: item.changed

- name: Create {{ nso_etc_dir }}/ncs.conf
  ansible.builtin.template:
    src: ncs.conf.j2
    dest: "{{ nso_etc_dir }}/ncs.conf"

- name: Add NSO groups
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop:
    - ncsadmin
    - ncsoper

- name: Add {{ nso_username }} to ncsadmin
  ansible.builtin.user:
    name: "{{ nso_username }}"
    groups: ncsadmin
    append: yes

- name: Set password for {{ nso_username }}
  ansible.builtin.user:
    name: "{{ nso_username }}"
    password: "{{ nso_password | password_hash('sha512') }}"

- name: Tweak bash profile
  blockinfile:
    path: '/home/{{ nso_username }}/.bashrc'
    insertafter: EOF
    block: |
      if [ -f ~/{{ nso_install_dir }}/ncsrc ]; then
          . ~/{{ nso_install_dir }}/ncsrc
      fi
      export NCS_JAVA_VM_OPTIONS="{{ nso_java_opts }}"

- name: Enable NCS Service
  ansible.builtin.systemd:
    name: ncs.service
    state: started
    enabled: yes
