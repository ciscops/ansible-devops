---
- name: Process package list
  environment:
    NCS_JAVA_VM_OPTIONS: "{{ nso_java_opts }}"
  vars:
    remote_src: yes
  block:
    - name: Remove old package directory
      file:
        path: "{{ nso_run_dir }}/packages/{{ item.name }}"
        state: absent
      loop: "{{ nso_package_repos }}"

    - block:
        - name: Clone model-driven-devops nso-oc-services repo
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            version: "{{ item.version | default(omit) }}"
            dest: "/tmp/{{ item.name }}"
          loop: "{{ nso_package_repos }}"

        - name: Copy models to packages directory
          copy:
            src: "/tmp/{{ item.0.name }}/{{ item.1 }}"
            dest: "{{ nso_run_dir }}/packages"
            remote_src: "{{ remote_src }}"
          register: copy_results
          with_subelements:
            - "{{ nso_package_repos }}"
            - service_list
      when: remote_src | bool

    - block:
        - name: Clone model-driven-devops nso-oc-services repo locally
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            version: "{{ item.version | default(omit) }}"
            dest: "/tmp/{{ item.name }}"
          loop: "{{ nso_package_repos }}"
          connection: local

        - name: Synchronize models to packages directory
          ansible.posix.synchronize:
            src: "/tmp/{{ item.0.name }}/{{ item.1 }}"
            dest: "{{ nso_run_dir }}/packages"
          register: synchronize_results
          with_subelements:
            - "{{ nso_package_repos }}"
            - service_list
      when: not remote_src | bool

    - set_fact:
        results: "{{ copy_results if remote_src | bool else synchronize_results }}"

    - name: Make packages
      command:
        chdir: '{{ nso_run_dir }}/packages/{{ item.item.0.name }}/src/'
        cmd: '/bin/bash -c "source {{ nso_install_dir }}/ncsrc; make"'
      loop: "{{ results.results }}"
      when: results.changed

    - name: Remove repo
      file:
        path: '/tmp/{{ item.name }}'
        state: absent
      with_items: "{{ nso_package_repos }}"

    - name: Reload Packages
      cisco.nso.nso_action:
        url: "{{ nso_url }}"
        username: "{{ nso_username }}"
        password: "{{ nso_password }}"
        path: /ncs:packages/reload
        input: {}
      when: results.changed
  when: nso_package_repos is defined
