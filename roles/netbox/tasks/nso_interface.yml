- name: Set Defaults
  set_fact:
    interface_untagged_vlan: ''
    interface_tagged_vlans: []
    interface_mode: ''

# This is a switchport
- block:
  # This is an access switchport
  - name: Set Mode Access
    set_fact:
      interface_mode: 'Access'
      interface_untagged_vlan:
        vid: "{{ interface_data.switchport.access.vlan }}"
        site: "{{ netbox_site }}"
    when: interface_data.switchport.mode is defined and 'access' in interface_data.switchport.mode and interface_data.switchport.access is defined and interface_data.switchport.access.vlan is defined

  # This is a tagged switchport
  - block:
    - name: Set Mode Tagged
      set_fact:
        interface_mode: 'Tagged'

    - name: Set Trunk Native VLAN
      set_fact:
        interface_untagged_vlan:
          vid: "{{ interface_data.switchport.trunk.native.vlan }}"
          site: "{{ netbox_site }}"
      when: interface_data.switchport.trunk.native is defined

    - name: Set Trunk Allowed VLANs
      set_fact:
        interface_tagged_vlans: "{{ interface_tagged_vlans + [ {'vid': vlan_id, 'site': netbox_site } ] }}"
      loop: "{{ interface_data.switchport.trunk.allowed.vlan.vlans }}"
      loop_control:
        loop_var: vlan_id
      when: interface_data.switchport.trunk.allowed is defined      
    when: interface_data.switchport.mode is defined and 'trunk' in interface_data.switchport.mode
  when: interface_data.switchport is defined

- block:
  - name: Set interface encapsulation
    set_fact:
      interface_mode: 'Access'
      interface_untagged_vlan:
        vid: "{{ interface_data['encapsulation']['dot1Q']['vlan-id'] }}"
        site: "{{ netbox_site }}"

  - name: Get VLAN
    uri:
      url: "{{ netbox_api }}/api/ipam/vlans/?vid={{ interface_data['encapsulation']['dot1Q']['vlan-id'] }}" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [200]
      method: GET
    register: results
  
  - set_fact:
      vlan_count: "{{ results.json.count }}"

  - name: Create VLAN
    netbox.netbox.netbox_vlan:
      netbox_url: "{{ netbox_api }}"
      netbox_token: "{{ netbox_token }}"
      query_params:
        - vid
        - site
      data:
        name: "Vlan{{ interface_data['encapsulation']['dot1Q']['vlan-id'] }}"
        vid: "{{ interface_data['encapsulation']['dot1Q']['vlan-id'] }}"
        site: "{{ netbox_site }}"
      state: present
      validate_certs: "{{ netbox_validate_certs }}"
    when: vlan_count == "0"
  when: interface_data.encapsulation is defined

- name: Set Interface Type
  set_fact:
    netbox_interface_type: "{{ netbox_interface_type_lookup[interface_type | lower] | default('Other') }}"
  vars:
    interface_type: "{{ interface_name | regex_search('^([^0-9]+)[0-9]', '\\1') | first }}"

# - name: Set Interface Parent
#   set_fact:
#     interface_parent: "{{ interface_name | regex_search('^[^.]+\.(.+)$', '\\1') | first }}"    

- name: Set Channel Group
  set_fact:
    interface_channel_group: "Port-channel{{ interface_data['channel-group'].number }}"
  when: '"channel-group" in interface_data'

- name: Create Interface {{ interface_name }}
  netbox.netbox.netbox_device_interface:
    netbox_url: "{{ netbox_api }}"
    netbox_token: "{{ netbox_token }}"
    data:
      device: "{{ inventory_hostname }}"
      name: "{{ interface_name }}"
      description: "{{ interface_data.description | default(omit) }}"
      enabled: "{{ false if interface_data.shutdown is defined else true  }}"
      type: "{{ netbox_interface_type }}"
      mode: "{{ interface_mode if interface_mode else omit }}"
      tagged_vlans: "{{ interface_tagged_vlans if interface_tagged_vlans else omit }}"
      untagged_vlan: "{{ interface_untagged_vlan if interface_untagged_vlan else omit }}"
      lag: "{{ interface_channel_group if 'channel-group' in interface_data else omit }}"
      mtu: "{{ interface_data.mtu | default(omit) }}"
    state: present
    validate_certs: "{{ netbox_validate_certs }}"
  register: netbox_interface_results
  tags:
    - interface

- block:
  - set_fact:
      ip_address: "{{ ip_mask | ansible.netcommon.ipaddr('host/prefix') }}"
      ip_subnet: "{{ ip_mask | ansible.netcommon.ipaddr('subnet') }}"
    when: interface_data.ip.address is defined and interface_data.ip.address.primary is defined
    vars:
      ip_mask: "{{ interface_data.ip.address.primary.address }}/{{ interface_data.ip.address.primary.mask }}"

  - name: Add IP Prefix
    netbox.netbox.netbox_prefix:
      netbox_url: "{{ netbox_api }}"
      netbox_token: "{{ netbox_token }}"
      data:
        prefix: "{{ ip_subnet }}"
        site: "{{ netbox_site }}"
      state: present
      validate_certs: "{{ netbox_validate_certs }}"
    when: interface_data.ip.address is defined and interface_data.ip.address.primary is defined and ip_address != ip_subnet

  - name: Add IP address
    netbox.netbox.netbox_ip_address:
      netbox_url: "{{ netbox_api }}"
      netbox_token: "{{ netbox_token }}"
      data:
        address: "{{ ip_address }}"
        description: "{{ interface_data.description | default(omit) }}"
        # Skip VRF assignment now; uncomment when it is working
        # vrf: "{{ interface_data.vrf.forwarding | default(omit) }}"
        assigned_object:
          device: "{{ inventory_hostname }}"
          name: "{{ interface_name }}"
        status: active
      state: present
      validate_certs: "{{ netbox_validate_certs }}"
    when: interface_data.ip.address is defined and interface_data.ip.address.primary is defined
    tags:
    - interface
  when: interface_data.ip is defined

  # The NetBox collection does not currently support FHRP, so use URI module instead
- block:
  - name: Get FHRP Groups
    uri:
      url: "{{ netbox_api }}/api/ipam/fhrp-groups/?group_id={{ interface_data.vrrp[0].id }}" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [200]
      method: GET
    register: results

  - set_fact:
      group_count: "{{ results.json.count }}"
  
  - set_fact:
      group_id: "{{ results.json.results[0].id }}"
    when: results.json.results[0].id is defined

  - name: Create FHRP Group
    uri:
      url: "{{ netbox_api }}/api/ipam/fhrp-groups/" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [201]
      method: POST
      body_format: json
      body:
        group_id: "{{ interface_data.vrrp[0].id }}"
        protocol: "vrrp2"
    when: group_count == "0"
    register: results

  - set_fact:
      group_id: "{{ results.json.id }}"
    when: group_count == "0"

  - name: Create FHRP IP Address
    uri:
      url: "{{ netbox_api }}/api/ipam/ip-addresses/" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [201]
      method: POST
      body_format: json
      body:
        address: "{{ interface_data.vrrp[0].ip.address }}/{{ interface_data.ip.address.primary.mask }}"
        assigned_object_type: "ipam.fhrpgroup"
        assigned_object_id: "{{ results.json.id }}"
    when: group_count == "0"

  - name: Get FHRP Group Assignments
    uri:
      url: "{{ netbox_api }}/api/ipam/fhrp-group-assignments/?interface_id={{ netbox_interface_results.interface.id }}" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [200]
      method: GET
    register: results
  
  - set_fact:
      assignments_count: "{{ results.json.count }}"

  - name: Assign FHRP Group to Interface
    uri:
      url: "{{ netbox_api }}/api/ipam/fhrp-group-assignments/" 
      headers:
        Authorization: "Token {{ netbox_token }}"
      force_basic_auth: yes
      validate_certs: no
      status_code: [201]
      method: POST
      body_format: json
      body:
        group: "{{ group_id }}"
        interface_type: "dcim.interface"
        interface_id: "{{ netbox_interface_results.interface.id }}"
        priority: "{{ interface_data.vrrp[0].priority | default(100) }}"
    when: assignments_count == "0"

  when: interface_data.vrrp is defined and interface_data.ip is defined
